<html>
    <head>
	<title>W08: task4</title>
    </head>
    <body>
      <script src="three.min.js"></script>

      <script type="x-shader/x-vertex" id="gouraud.vert">

	<!-- 参考URL--> 
	<!--https://spphire9.wordpress.com/2013/03/13/webglでcook-torrance/-->
	
	varying vec3 point_color;
	varying vec4 point_position;
	varying vec3 normal_vector; <!--vNormal-->
	uniform vec3 light_position; 
	uniform vec3 camera_position;

	uniform vec4 diffuse;  <!-- 拡散反射係数 -->
	uniform vec4 specular; <!-- 鏡面反射係数 -->
	uniform vec4 ambient;  <!-- 環境光 -->
	uniform float microfacet; <!--  面の粗さ -->
	
	<!--  Beckman分布 -->
	float BechmannDistribution(float d, float m) {
	float d2 = d * d;
	float m2 = m * m;
	return exp((d2 - 1.0) / (d2 * m2)) / (m2 * d2 * d2);
	}
 
	<!--  フレネル項 -->
	float Fresnel(float c, float f0) {
	float sf = sqrt(f0);
	float n = (1.0 + sf) / (1.0 - sf);
	float g = sqrt(n * n + c * c - 1.0);
	float ga = (c * (g + c) - 1.0) * (c * (g + c) - 1.0);
	float gb = (c * (g - c) + 1.0) * (c * (g - c) + 1.0);
	return (g - c) * (g - c) / (2.0 * (g + c) + (g + c)) * (1.0 + ga / gb);
	}


	<!-- Cook-Torrance -->
	vec3 Cook-Torrance(vec3 C,vec3 L,vec3 N, vec3 V)
	{
	float ka = 0.3;
	float kd = 0.5;
	float ks = 0.8;
	float n = 50.0;
	
	vec3 H = normalize(L+V);<!-- h -->

	float dd = max( dot(N, L), 0.0); 
	float ds = pow( max( dot(N,H),0.0), n); <!-- hn -->
	if (dd <= 0.0){	 ds = 0.0;}
	float Ia = ka;
	float Id = kd*dd;
	float Is = ks*ds;
		  
	return C*(Ia+Id+Is);
	}

	
	void main()
	{
	point_position = modelViewMatrix * vec4(position, 1.0);
	normal_vector = normalMatrix * normal;
	
	vec3 C = color;
	vec3 L = normalize( light_position - point_position.xyz);<!-- l -->
	vec3 N = normalize( normal_vector); <!-- n -->
	vec3 V = normalize(camera_position-point_position.xyz);<!-- v -->

	point_color = Cook-Torrance(C,L,N,V);
	gl_Position = projectionMatrix * point_position;
	}
      </script>

      <script type="x-shader/x-fragment" id="gouraud.frag">
	varying vec3 point_color;
	
	void main(){
	gl_FragColor = vec4(point_color,1.0);
	}
      </script>
      
      <script type="x-shader/x-vertex" id="phong.vert">
	varying vec3 point_color;
	varying vec4 point_position;
	varying vec3 normal_vector;

			 
	void main()
	{
	point_color = color;
	point_position = modelViewMatrix * vec4(position, 1.0);
	normal_vector = normalMatrix * normal;	 


	gl_Position = projectionMatrix * point_position;
	}
      </script>
      
      <script type="x-shader/x-fragment" id="phong.frag">

	varying vec3 point_color;
	varying vec4 point_position;
	varying vec3 normal_vector;
	uniform vec3 light_position;
	uniform vec3 camera_position;

	vec3 BlinnPhongReflection(vec3 C,vec3 L,vec3 N, vec3 V)
	{
	float ka = 0.3;
	float kd = 0.5;
	float ks = 0.8;
	float n = 50.0;
	
	vec3 H = normalize(L+V);

	float dd = max( dot(N, L), 0.0);
	float ds = pow( max( dot(N,H),0.0), n);
	if (dd <= 0.0){	 ds = 0.0;}
	float Ia = ka;
	float Id = kd*dd;
	float Is = ks*ds;
		  
	return C*(Ia+Id+Is);
	}

	void main(){
	vec3 C = point_color;
	vec3 L = normalize( light_position - point_position.xyz);
	vec3 N = normalize( normal_vector);
	vec3 V = normalize( camera_position - point_position.xyz );
	
	vec3 shaded_color = BlinnPhongReflection(C,L,N,V);
		  
	gl_FragColor = vec4(shaded_color,1.0);
	}
      </script>
      
      <script src="w08_task4.js"></script>
      <script>
	main();
      </script>
    </body>
</html>
